
.data

.text

fu:	# Beginning of a function. We will save the return adress $31 and the $fp.
	ADDI $sp, $sp, -8
	SW $31, 4($sp)
	SW $fp, 0($sp)
	MOVE $fp, $sp

	LI $5, 2	#Number recognised:2
	MOVE $2, $5	#Return int
	J l0
l0:
	#End of function fu. We will restore the return adress $31 and the $fp. Then we will jump back to where the func was called.
	LW $fp, 0($sp)
	LW $31, 4($sp)
	ADDI $sp, $sp, 8
	JR $31

func:	# Beginning of a function. We will save the return adress $31 and the $fp.
	ADDI $sp, $sp, -8
	SW $31, 4($sp)
	SW $fp, 0($sp)
	MOVE $fp, $sp

	LI $5, 2	#Number recognised:2
	MOVE $2, $5	#Return int
	J l1
l1:
	#End of function func. We will restore the return adress $31 and the $fp. Then we will jump back to where the func was called.
	LW $fp, 0($sp)
	LW $31, 4($sp)
	ADDI $sp, $sp, 8
	JR $31

main:	# Beginning of a function. We will save the return adress $31 and the $fp.
	ADDI $sp, $sp, -8
	SW $31, 4($sp)
	SW $fp, 0($sp)
	MOVE $fp, $sp

	ADDI $sp, $sp, -20	#Allocate Memory on stackpointer for local Variables
	#int x: 16($sp)
	#int y: 12($sp)
	#int z: 8($sp)
	#int u: 4($sp)
	#int i: 0($sp)
	LI $5, 2	#Number recognised:2
	LW $6, 16($sp)	#Local Variable recognised:x
	SW $5, 16($sp)	#Assign one register to another
	LI $5, 3	#Number recognised:3
	LW $6, 12($sp)	#Local Variable recognised:y
	SW $5, 12($sp)	#Assign one register to another
	JAL func	#Call function
	MOVE $15, $2	#Save return value by storing it into a temp register
	LW $6, 4($sp)	#Local Variable recognised:u
	SW $15, 4($sp)	#Assign one register to another
